@page "/status-data"
@inject NavigationManager NavigationManager
@inject IJSRuntime JSRuntime
@inject IStringLocalizer<App> _localizer

<nav aria-label="breadcrumb">
        <ol class="breadcrumb breadcrumb-no-gutter mb-3 m-md-3">
              <li class="breadcrumb-item"><a href="/officer-home">Officer home</a></li>
              <li class="breadcrumb-item active" aria-current="page">StatusData</li>
        </ol>
</nav>

<div id="paymentDetails" class="accordion">
     <!-- Card -->
  <div class="card">
    <div class="card-header card-collapse" id="cardHeadingOne">
      <h5 class="mb-0">
        <button class="btn btn-link btn-block card-btn collapsed p-3" role="button"
                data-toggle="collapse"
                data-target="#cardOne"
                aria-expanded="false"
                aria-controls="cardOne">
          <span class="row align-items-center">
            <span class="col-md-6 mb-2 mb-md-0">
              <span class="media align-items-center">
                <img class="max-width-9 mr-3" src="./assets/img/160x160/img3.jpg" alt="Image Description">
                <span class="media-body">
                  <span class="font-size-1">Військові звання</span>
                </span>
              </span>
            </span>        
            <span class="col-4 col-md-2 text-md-right">
            </span>
            <span class="col-6 col-md-3">
              <span class="font-size-1"></span>
            </span>
            <span class="col-2 col-md-1 text-right">
              <span class="card-btn-arrow">
                <span class="fas fa-arrow-down small"></span>
              </span>
            </span>
          </span>
        </button>    

      </h5>         

    </div>
    <div id="cardOne" class="collapse" aria-labelledby="cardHeadingOne" data-parent="#paymentDetails">
           <div class="card-body px-4">
        <!-- Card Details -->
        <div class="row">
          <div class="col-sm-4 mb-2 mb-sm-0">           
           <EditForm Model="@statusModel" OnValidSubmit="HandleValidSubmitStatus"  class="body  p-3 mb-5 rounded ">
             <DataAnnotationsValidator />
       
               <div class="row d-flex">
                   <div class="col-lg-12 form-group">
                   <div class="input-group input-group-pill">
                       <input type="text" class="form-control" @bind-value="statusModel.Name" placeholder="@_localizer["Add new Status"]" aria-label="Region"  aria-invalid="true">
                 </div>
                </div>            
               </div>
             <div class="row">
                <div class="ml-lg-3 m-3">
                    <button type="submit" class="btn btn-xs btn-primary ">&nbsp;@_localizer["Add"]&nbsp;</button>
                    <NavLink class="btn btn-xs btn-soft-secondary mr-1" @onclick="Cancel">&nbsp;@_localizer["Cancel"]&nbsp;</NavLink>
                </div>
            </div>
         </EditForm>
          </div>
          <div class="col-sm-8 mb-2 mb-sm-0 body  p-3 mb-5 rounded">
              <table class="table table-responsive-md u-datatable  shadow-primary-lg p-3 mb-5 rounded">
                  <thead>
                    <tr>
                      <th scope="col">#</th>
                      <th scope="col">Назва</th>     
                      <th scope="col">Дія</th>   
                    </tr>
                  </thead>
                   
                  @foreach(var item in getStatusList)
                    {        
                      int index = @getStatusList.IndexOf(item)+1;
                      <tbody>                                           
                        <tr>          
                              <td scope="row">@index</td> 
                              <td >@item.Name</td>    
                              <td>
                                   <button class="btn btn-sm btn btn-outline-info">
                                            <img @onclick="(() => ShowPopupStatus(item.Id))" src="./assets/svg/icons/edit.png" />
                                   </button>
                                    <button class=" btn btn-sm btn btn-outline-danger" @onclick="(() => DeleteStatus(item.Id))" disabled="@DeleteDisabled">Delete</button>
                              </td>
                       </tr>                                           
                      </tbody>      
                    }    
            </table>
          </div>
        </div>
        <!-- End Card Details -->
      </div>     
    </div>
  </div>
  <!-- End Card -->
    <div> 
</div>
 </div>

 @if (showPopupStatus)
{
    <EditForm Model="@statusPopupModel" OnValidSubmit="HandleValidSubmitPopupStatus" class="body  p-3 mb-5 rounded ">
        <div class="modal" tabindex="-1" role="dialog" style="display:block;">
            <div class="modal-dialog" role="document">
                <div class="modal-content">
                    <div class="modal-header">
                         <h5 class="modal-title" style="color:red">Редагувати!</h5>
                        <button type="button" class="close" data-dismiss="modal" aria-label="Close" @onclick="(() => ClosePopup())">
                            <span aria-hidden="true">&times;</span>
                        </button>
                    </div>
                    <div class="modal-body">
                        <table class="table table-striped table-bordered table-sm">
                            <tr class="form-group">
                                <td>Назва</td>
                                <td><input class="form-control" type="text" @bind-value="statusPopupModel.Name" /></td>
                            </tr>                          
                        </table>
                    </div>
                    <div class="modal-footer">
                        <button type="submit" class="btn btn-primary">Save changes</button>
                        <button type="button" class="btn btn-secondary" @onclick="(() => ClosePopup())" data-dismiss="modal">Close</button>
                    </div>
                </div>
            </div>
        </div>
    </EditForm>
}

@code {
    StatusDto statusModel = new StatusDto();
    StatusDto statusPopupModel = new StatusDto();

    List<StatusDto> getStatusList = new List<StatusDto>();
    protected bool Collapsed = true;
    bool showPopupStatus = false;
    string DeleteDisabled { get; set; } = null;
    string userId;

    [CascadingParameter]
    private Task<AuthenticationState> authenticationStateTask { get; set; }

    protected override async Task OnInitializedAsync()
    {
        var authState = await authenticationStateTask;
        userId = authState.User.Claims.FirstOrDefault().Value;

        if (authState.User.Identity.IsAuthenticated)
        {
            getStatusList = StatusAdapter.GetAllStatus();

        }
    }

    private void HandleValidSubmitStatus()
    {
        if(!string.IsNullOrEmpty(statusModel.Name))
        {
             StatusAdapter.SaveStatus(statusModel);
             statusModel.Name = string.Empty;
             getStatusList = StatusAdapter.GetAllStatus();
        }
       
        showPopupStatus = false;
    }

    private void HandleValidSubmitPopupStatus()
    {
        if(!string.IsNullOrEmpty(statusPopupModel.Name))
        {
              StatusAdapter.SaveStatus(statusPopupModel);
              statusModel.Name = string.Empty;
              getStatusList = StatusAdapter.GetAllStatus();
        }
      
        showPopupStatus = false;
    }

    public void Cancel()
    {       
        NavigationManager.NavigateTo("/officer-home");
    }

    public void ShowPopupStatus(int id)
    {
        showPopupStatus = true;    
        statusPopupModel = StatusAdapter.GetDistrictId(id);
    }

    public void ClosePopup()
    {
        showPopupStatus = false;

    }

    private void Collaps()
    {       
        Collapsed = !Collapsed;
    }

    private void DeleteStatus(int id)
    {
        StatusAdapter.Delete(id);
        getStatusList = StatusAdapter.GetAllStatus();
    }
}
